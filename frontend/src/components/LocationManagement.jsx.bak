import React, { useState, useEffect } from 'react';
import {
  Box, Paper, Typography, Button, TextField, Dialog, DialogActions,
  DialogContent, DialogTitle, Table, TableBody, TableCell, TableContainer,
  TableHead, TableRow, CircularProgress, Alert, IconButton
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import AddIcon from '@mui/icons-material/Add';
import { 
  getAllLocations, 
  createLocation, 
  updateLocation, 
  deleteLocation 
} from '../services/locationService';

const LocationManagement = () => {
  const [locations, setLocations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [openDialog, setOpenDialog] = useState(false);
  const [currentLocation, setCurrentLocation] = useState({
    locationName: '',
    address: '',
    city: '',
    state: '',
    country: '',
    postalCode: '',
    latitude: '',
    longitude: '',
    radius: ''
  });
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    fetchLocations();
  }, []);

  const fetchLocations = async () => {
    setLoading(true);
    try {
      const response = await getAllLocations();
      const data = response?.data || response;
      setLocations(Array.isArray(data) ? data : []);
      setError('');
    } catch (err) {
      console.error('Error fetching locations:', err);
      setError('Failed to fetch locations. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDialog = (location = null) => {
    if (location) {
      setCurrentLocation(location);
      setIsEditing(true);
    } else {
      setCurrentLocation({
        locationName: '',
        address: '',
        city: '',
        state: '',
        country: '',
        postalCode: '',
        latitude: '',
        longitude: '',
        radius: ''
      });
      setIsEditing(false);
    }
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setError('');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCurrentLocation(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateForm = () => {
    if (!currentLocation.locationName.trim()) {
      setError('Location name is required');
      return false;
    }
    if (!currentLocation.address.trim()) {
      setError('Address is required');
      return false;
    }
    if (!currentLocation.city.trim()) {
      setError('City is required');
      return false;
    }
    if (!currentLocation.country.trim()) {
      setError('Country is required');
      return false;
    }
    if (!currentLocation.latitude || isNaN(parseFloat(currentLocation.latitude))) {
      setError('Latitude must be a valid number');
      return false;
    }
    if (!currentLocation.longitude || isNaN(parseFloat(currentLocation.longitude))) {
      setError('Longitude must be a valid number');
      return false;
    }
    if (!currentLocation.radius || isNaN(parseFloat(currentLocation.radius))) {
      setError('Radius must be a valid number');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      if (isEditing) {
        await updateLocation(
          currentLocation.locationId,
          currentLocation
        );
        setSuccess('Location updated successfully');
      } else {
        await createLocation(currentLocation);
        setSuccess('Location created successfully');
      }
      fetchLocations();
      handleCloseDialog();
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      console.error('Error saving location:', err);
      setError(err.response?.data?.message || 'Failed to save location. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteLocation = async (locationId) => {
    if (!window.confirm('Are you sure you want to delete this location?')) return;
    
    setLoading(true);
    try {
      await deleteLocation(locationId);
      setSuccess('Location deleted successfully');
      fetchLocations();
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      console.error('Error deleting location:', err);
      setError(err.response?.data?.message || 'Failed to delete location. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6">Location Management</Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={() => handleOpenDialog()}
        >
          Add Location
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
      {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}

      {loading && !openDialog ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
          <CircularProgress />
        </Box>
      ) : (
        <TableContainer component={Paper} sx={{ mt: 2 }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Name</TableCell>
                <TableCell>Address</TableCell>
                <TableCell>City</TableCell>
                <TableCell>Country</TableCell>
                <TableCell>Coordinates</TableCell>
                <TableCell>Radius (m)</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {locations.length > 0 ? (
                locations.map((location) => (
                  <TableRow key={location.locationId}>
                    <TableCell>{location.locationName}</TableCell>
                    <TableCell>{location.address}</TableCell>
                    <TableCell>{location.city}</TableCell>
                    <TableCell>{location.country}</TableCell>
                    <TableCell>
                      {location.latitude}, {location.longitude}
                    </TableCell>
                    <TableCell>{location.radius}</TableCell>
                    <TableCell>
                      <IconButton 
                        color="primary" 
                        onClick={() => handleOpenDialog(location)}
                        size="small"
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton 
                        color="error" 
                        onClick={() => handleDeleteLocation(location.locationId)}
                        size="small"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} align="center">
                    No locations found. Click "Add Location" to create one.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
      )}

      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogTitle>{isEditing ? 'Edit Location' : 'Add New Location'}</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
            <TextField
              autoFocus
              name="locationName"
              label="Location Name"
              type="text"
              fullWidth
              variant="outlined"
              value={currentLocation.locationName}
              onChange={handleInputChange}
              required
            />
            
            <TextField
              name="address"
              label="Address"
              type="text"
              fullWidth
              variant="outlined"
              value={currentLocation.address}
              onChange={handleInputChange}
              required
            />
            
            <Box sx={{ display: 'flex', gap: 2 }}>
              <TextField
                name="city"
                label="City"
                type="text"
                fullWidth
                variant="outlined"
                value={currentLocation.city}
                onChange={handleInputChange}
                required
              />
              
              <TextField
                name="state"
                label="State/Province"
                type="text"
                fullWidth
                variant="outlined"
                value={currentLocation.state}
                onChange={handleInputChange}
              />
            </Box>
            
            <Box sx={{ display: 'flex', gap: 2 }}>
              <TextField
                name="country"
                label="Country"
                type="text"
                fullWidth
                variant="outlined"
                value={currentLocation.country}
                onChange={handleInputChange}
                required
              />
              
              <TextField
                name="postalCode"
                label="Postal Code"
                type="text"
                fullWidth
                variant="outlined"
                value={currentLocation.postalCode}
                onChange={handleInputChange}
              />
            </Box>
            
            <Typography variant="subtitle1" sx={{ mt: 1 }}>
              Geolocation (for attendance verification)
            </Typography>
            
            <Box sx={{ display: 'flex', gap: 2 }}>
              <TextField
                name="latitude"
                label="Latitude"
                type="number"
                fullWidth
                variant="outlined"
                value={currentLocation.latitude}
                onChange={handleInputChange}
                required
                inputProps={{ step: "0.000001" }}
              />
              
              <TextField
                name="longitude"
                label="Longitude"
                type="number"
                fullWidth
                variant="outlined"
                value={currentLocation.longitude}
                onChange={handleInputChange}
                required
                inputProps={{ step: "0.000001" }}
              />
            </Box>
            
            <TextField
              name="radius"
              label="Attendance Radius (meters)"
              type="number"
              fullWidth
              variant="outlined"
              value={currentLocation.radius}
              onChange={handleInputChange}
              required
              helperText="Maximum distance in meters from coordinates for attendance verification"
              inputProps={{ min: 1 }}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button 
            onClick={handleSubmit} 
            variant="contained" 
            color="primary" 
            disabled={loading}
          >
            {loading ? 'Saving...' : (isEditing ? 'Update' : 'Save')}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default LocationManagement; 