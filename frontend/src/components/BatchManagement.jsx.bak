import React, { useState, useEffect } from 'react';
import { 
  Box, Paper, Typography, Button, TextField, Dialog, DialogActions, 
  DialogContent, DialogTitle, Table, TableBody, TableCell, TableContainer, 
  TableHead, TableRow, CircularProgress, Alert, IconButton, MenuItem,
  FormControl, InputLabel, Select, Tabs, Tab
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import PeopleIcon from '@mui/icons-material/People';
import AddIcon from '@mui/icons-material/Add';
import { 
  getAllBatches, 
  getBatchById,
  createBatch,
  updateBatch,
  deleteBatch,
  getBatchStudents,
  addStudentToBatch,
  removeStudentFromBatch
} from '../services/batchService';
import { getAllPrograms } from '../services/programService';
import { getAllUsers } from '../services/userService';
import axios from 'axios';
import { API_BASE_URL } from '../config';

function TabPanel(props) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const BatchManagement = () => {
  const [batches, setBatches] = useState([]);
  const [programs, setPrograms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [openDialog, setOpenDialog] = useState(false);
  const [currentBatch, setCurrentBatch] = useState({
    batchName: '',
    programId: '',
    startDate: '',
    endDate: '',
    capacity: ''
  });
  const [isEditing, setIsEditing] = useState(false);
  const [tabValue, setTabValue] = useState(0);
  const [selectedBatch, setSelectedBatch] = useState(null);
  const [students, setStudents] = useState([]);
  const [availableStudents, setAvailableStudents] = useState([]);
  const [selectedStudent, setSelectedStudent] = useState('');
  const [openStudentDialog, setOpenStudentDialog] = useState(false);
  const [allStudents, setAllStudents] = useState([]);
  const [batchStudents, setBatchStudents] = useState([]);
  const [newStudentId, setNewStudentId] = useState('');
  const [studentsLoading, setStudentsLoading] = useState(false);

  useEffect(() => {
    fetchBatches();
    fetchPrograms();
  }, []);

  const fetchBatches = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API_BASE_URL}/api/batches`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = response?.data || response;
      setBatches(Array.isArray(data) ? data : []);
      setError('');
    } catch (err) {
      console.error('Error fetching batches:', err);
      setError('Failed to fetch batches. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const fetchPrograms = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/programs`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = response?.data || response;
      setPrograms(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error('Error fetching programs:', err);
    }
  };

  const fetchBatchStudents = async (batchId) => {
    setLoading(true);
    try {
      const response = await axios.get(`${API_BASE_URL}/api/batches/${batchId}/students`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = response?.data || response;
      setStudents(Array.isArray(data) ? data : []);
      await fetchAvailableStudents();
    } catch (err) {
      console.error('Error fetching batch students:', err);
      setError('Failed to fetch students. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const fetchAvailableStudents = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/users?role=student`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = response?.data || response;
      setAvailableStudents(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error('Error fetching available students:', err);
    }
  };

  const handleOpenDialog = (batch = null) => {
    if (batch) {
      setCurrentBatch({
        ...batch,
        startDate: batch.startDate ? batch.startDate.substring(0, 10) : '',
        endDate: batch.endDate ? batch.endDate.substring(0, 10) : ''
      });
      setIsEditing(true);
    } else {
      setCurrentBatch({
        batchName: '',
        programId: '',
        startDate: '',
        endDate: '',
        capacity: ''
      });
      setIsEditing(false);
    }
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setError('');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCurrentBatch(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateForm = () => {
    if (!currentBatch.batchName.trim()) {
      setError('Batch name is required');
      return false;
    }
    if (!currentBatch.programId) {
      setError('Program is required');
      return false;
    }
    if (!currentBatch.startDate) {
      setError('Start date is required');
      return false;
    }
    if (!currentBatch.capacity) {
      setError('Capacity is required');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      if (isEditing) {
        await axios.put(
          `${API_BASE_URL}/api/batches/${currentBatch.batchId}`,
          currentBatch,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem('token')}`
            }
          }
        );
        setSuccess('Batch updated successfully');
      } else {
        await axios.post(
          `${API_BASE_URL}/api/batches`,
          currentBatch,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem('token')}`
            }
          }
        );
        setSuccess('Batch created successfully');
      }
      fetchBatches();
      handleCloseDialog();
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      console.error('Error saving batch:', err);
      setError(err.response?.data?.message || 'Failed to save batch. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteBatch = async (batchId) => {
    if (!window.confirm('Are you sure you want to delete this batch?')) return;
    
    setLoading(true);
    try {
      await axios.delete(
        `${API_BASE_URL}/api/batches/${batchId}`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      setSuccess('Batch deleted successfully');
      fetchBatches();
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      console.error('Error deleting batch:', err);
      setError(err.response?.data?.message || 'Failed to delete batch. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleViewStudents = (batch) => {
    setSelectedBatch(batch);
    fetchBatchStudents(batch.batchId);
    setTabValue(1);
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
    if (newValue === 0) {
      setSelectedBatch(null);
    }
  };

  const handleOpenStudentDialog = async (batch) => {
    setSelectedBatch(batch);
    setStudentsLoading(true);
    setOpenStudentDialog(true);
    
    try {
      // Fetch all students
      const allStudentsResponse = await axios.get(`${API_BASE_URL}/api/users?role=student`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      setAllStudents(allStudentsResponse.data);
      
      // Fetch students in the batch
      const batchStudentsResponse = await axios.get(`${API_BASE_URL}/api/batches/${batch.batchId}/students`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      setBatchStudents(batchStudentsResponse.data);
    } catch (err) {
      console.error('Error fetching students:', err);
      setError('Failed to load students. Please try again.');
    } finally {
      setStudentsLoading(false);
    }
  };

  const handleCloseStudentDialog = () => {
    setOpenStudentDialog(false);
    setNewStudentId('');
  };

  const handleAssignStudent = async () => {
    if (!newStudentId) {
      setError('Please select a student');
      return;
    }

    setStudentsLoading(true);
    try {
      await axios.post(
        `${API_BASE_URL}/api/batches/${selectedBatch.batchId}/students`,
        { studentId: newStudentId },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      // Refresh batch students
      const response = await axios.get(`${API_BASE_URL}/api/batches/${selectedBatch.batchId}/students`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      setBatchStudents(response.data);
      setNewStudentId('');
      setSuccess('Student assigned to batch successfully');
    } catch (err) {
      console.error('Error assigning student:', err);
      setError(err.response?.data?.message || 'Failed to assign student. Please try again.');
    } finally {
      setStudentsLoading(false);
    }
  };

  const handleRemoveStudent = async (studentId) => {
    if (!window.confirm('Are you sure you want to remove this student from the batch?')) return;
    
    setStudentsLoading(true);
    try {
      await axios.delete(
        `${API_BASE_URL}/api/batches/${selectedBatch.batchId}/students/${studentId}`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      // Refresh batch students
      const response = await axios.get(`${API_BASE_URL}/api/batches/${selectedBatch.batchId}/students`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      setBatchStudents(response.data);
      setSuccess('Student removed from batch successfully');
    } catch (err) {
      console.error('Error removing student:', err);
      setError(err.response?.data?.message || 'Failed to remove student. Please try again.');
    } finally {
      setStudentsLoading(false);
    }
  };

  return (
    <Box>
      <Tabs value={tabValue} onChange={handleTabChange}>
        <Tab label="Batches" />
        <Tab label="Batch Students" disabled={!selectedBatch} />
      </Tabs>

      <TabPanel value={tabValue} index={0}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h6">Batch Management</Typography>
          <Button
            variant="contained"
            color="primary"
            startIcon={<AddIcon />}
            onClick={() => handleOpenDialog()}
          >
            Add Batch
          </Button>
        </Box>

        {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
        {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}

        {loading && !openDialog ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
            <CircularProgress />
          </Box>
        ) : (
          <TableContainer component={Paper} sx={{ mt: 2 }}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Batch Name</TableCell>
                  <TableCell>Program</TableCell>
                  <TableCell>Start Date</TableCell>
                  <TableCell>End Date</TableCell>
                  <TableCell>Capacity</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {batches.length > 0 ? (
                  batches.map((batch) => (
                    <TableRow key={batch.batchId}>
                      <TableCell>{batch.batchName}</TableCell>
                      <TableCell>
                        {programs.find(p => p.programId === batch.programId)?.programName || 'Unknown'}
                      </TableCell>
                      <TableCell>{new Date(batch.startDate).toLocaleDateString()}</TableCell>
                      <TableCell>
                        {batch.endDate ? new Date(batch.endDate).toLocaleDateString() : 'N/A'}
                      </TableCell>
                      <TableCell>{batch.capacity}</TableCell>
                      <TableCell>
                        <IconButton 
                          color="primary" 
                          onClick={() => handleOpenDialog(batch)}
                          size="small"
                        >
                          <EditIcon />
                        </IconButton>
                        <IconButton 
                          color="error" 
                          onClick={() => handleDeleteBatch(batch.batchId)}
                          size="small"
                        >
                          <DeleteIcon />
                        </IconButton>
                        <IconButton 
                          color="secondary" 
                          onClick={() => handleViewStudents(batch)}
                          size="small"
                        >
                          <PeopleIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={6} align="center">
                      No batches found. Click "Add Batch" to create one.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </TabPanel>

      <TabPanel value={tabValue} index={1}>
        {selectedBatch && (
          <>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">
                Students in {selectedBatch.batchName}
              </Typography>
              <Box sx={{ display: 'flex', gap: 2 }}>
                <FormControl sx={{ minWidth: 200 }}>
                  <InputLabel id="student-select-label">Add Student</InputLabel>
                  <Select
                    labelId="student-select-label"
                    value={selectedStudent}
                    label="Add Student"
                    onChange={(e) => setSelectedStudent(e.target.value)}
                  >
                    <MenuItem value="">
                      <em>Select a student</em>
                    </MenuItem>
                    {availableStudents.map((student) => (
                      <MenuItem key={student.userId} value={student.userId}>
                        {student.firstName} {student.lastName} ({student.email})
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleAddStudent}
                  disabled={!selectedStudent}
                >
                  Add to Batch
                </Button>
              </Box>
            </Box>

            {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
            {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}

            {loading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
                <CircularProgress />
              </Box>
            ) : (
              <TableContainer component={Paper} sx={{ mt: 2 }}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Student ID</TableCell>
                      <TableCell>Name</TableCell>
                      <TableCell>Email</TableCell>
                      <TableCell>Actions</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {students.length > 0 ? (
                      students.map((student) => (
                        <TableRow key={student.userId}>
                          <TableCell>{student.studentId}</TableCell>
                          <TableCell>{student.firstName} {student.lastName}</TableCell>
                          <TableCell>{student.email}</TableCell>
                          <TableCell>
                            <IconButton 
                              color="error" 
                              onClick={() => handleRemoveStudent(student.userId)}
                              size="small"
                            >
                              <DeleteIcon />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={4} align="center">
                          No students in this batch. Add students using the form above.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </>
        )}
      </TabPanel>

      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="sm" fullWidth>
        <DialogTitle>{isEditing ? 'Edit Batch' : 'Add New Batch'}</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            name="batchName"
            label="Batch Name"
            type="text"
            fullWidth
            variant="outlined"
            value={currentBatch.batchName}
            onChange={handleInputChange}
            required
            sx={{ mb: 2, mt: 1 }}
          />
          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel id="program-select-label">Program</InputLabel>
            <Select
              labelId="program-select-label"
              name="programId"
              value={currentBatch.programId}
              label="Program"
              onChange={handleInputChange}
              required
            >
              {programs.map((program) => (
                <MenuItem key={program.programId} value={program.programId}>
                  {program.programName}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <TextField
            margin="dense"
            name="startDate"
            label="Start Date"
            type="date"
            fullWidth
            variant="outlined"
            value={currentBatch.startDate}
            onChange={handleInputChange}
            required
            sx={{ mb: 2 }}
            InputLabelProps={{ shrink: true }}
          />
          <TextField
            margin="dense"
            name="endDate"
            label="End Date"
            type="date"
            fullWidth
            variant="outlined"
            value={currentBatch.endDate}
            onChange={handleInputChange}
            sx={{ mb: 2 }}
            InputLabelProps={{ shrink: true }}
          />
          <TextField
            margin="dense"
            name="capacity"
            label="Capacity"
            type="number"
            fullWidth
            variant="outlined"
            value={currentBatch.capacity}
            onChange={handleInputChange}
            required
            sx={{ mb: 1 }}
            inputProps={{ min: 1 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button 
            onClick={handleSubmit} 
            variant="contained" 
            color="primary" 
            disabled={loading}
          >
            {loading ? 'Saving...' : (isEditing ? 'Update' : 'Save')}
          </Button>
        </DialogActions>
      </Dialog>

      <Dialog 
        open={openStudentDialog} 
        onClose={handleCloseStudentDialog} 
        maxWidth="md" 
        fullWidth
      >
        <DialogTitle>
          Manage Students - {selectedBatch?.batchName}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
            <Tabs value={tabValue} onChange={handleTabChange}>
              <Tab label="Assign Students" />
              <Tab label="Current Students" />
            </Tabs>
          </Box>
          
          {tabValue === 0 && (
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
              <FormControl fullWidth sx={{ mr: 2 }}>
                <InputLabel id="student-label">Select Student</InputLabel>
                <Select
                  labelId="student-label"
                  value={newStudentId}
                  onChange={(e) => setNewStudentId(e.target.value)}
                  label="Select Student"
                  disabled={studentsLoading}
                >
                  {allStudents
                    .filter(student => !batchStudents.some(bs => bs._id === student._id))
                    .map((student) => (
                      <MenuItem key={student._id} value={student._id}>
                        {student.firstName} {student.lastName} ({student.email})
                      </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Button 
                variant="contained" 
                color="primary" 
                onClick={handleAssignStudent}
                disabled={!newStudentId || studentsLoading}
              >
                {studentsLoading ? <CircularProgress size={24} /> : 'Assign'}
              </Button>
            </Box>
          )}
          
          {tabValue === 1 && (
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Name</TableCell>
                    <TableCell>Email</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {studentsLoading ? (
                    <TableRow>
                      <TableCell colSpan={3} align="center">
                        <CircularProgress size={24} />
                      </TableCell>
                    </TableRow>
                  ) : batchStudents.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={3} align="center">
                        No students in this batch
                      </TableCell>
                    </TableRow>
                  ) : (
                    batchStudents.map((student) => (
                      <TableRow key={student._id}>
                        <TableCell>{student.firstName} {student.lastName}</TableCell>
                        <TableCell>{student.email}</TableCell>
                        <TableCell>
                          <IconButton 
                            size="small" 
                            color="error" 
                            onClick={() => handleRemoveStudent(student._id)}
                            title="Remove from batch"
                          >
                            <DeleteIcon />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseStudentDialog}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default BatchManagement; 